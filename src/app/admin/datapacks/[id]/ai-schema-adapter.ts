
import type { DataPackSchema, CharacterProfileSchema } from '@/types/datapack';

/**
 * Ensures that the schema generated by the AI, which might be in a simplified format,
 * is correctly structured for the form. It specifically ensures all equipment slots
 * in the `characterProfileSchema` are initialized as objects if they are not already.
 *
 * @param generatedSchema The schema object parsed from the AI's YAML output.
 * @returns A fully formed DataPackSchema ready for the form.
 */
export function formatDataPackSchemaFromAI(generatedSchema: DataPackSchema): DataPackSchema {
  const profileSchema = generatedSchema.characterProfileSchema || {};
  const equipmentSlots: (keyof CharacterProfileSchema)[] = ['head', 'face', 'neck', 'shoulders', 'torso', 'arms', 'hands', 'waist', 'legs', 'feet', 'back'];

  equipmentSlots.forEach(slot => {
    if (profileSchema[slot] && !profileSchema[slot]?.hasOwnProperty('clothing') && !profileSchema[slot]?.hasOwnProperty('armor')) {
       // It's likely in a flat array format, wrap it in a `clothing` or `armor` object
       const options = profileSchema[slot] as any;
       profileSchema[slot] = { clothing: options };
    } else if (!profileSchema[slot]) {
      // Ensure the object exists even if empty
      profileSchema[slot] = { clothing: [], armor: [], accessory: [], weapon: [] };
    }
  });

  return {
    ...generatedSchema,
    characterProfileSchema: profileSchema,
  };
}
