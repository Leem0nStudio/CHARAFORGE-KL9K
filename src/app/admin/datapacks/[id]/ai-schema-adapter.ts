
import type { DataPackSchema, CharacterProfileSchema, EquipmentSlotOptions } from '@/types/datapack';

/**
 * Ensures that the schema generated by the AI is correctly structured for the form.
 * It iterates through the AI-generated schema, ensures all expected equipment slots
 * are initialized as objects, and preserves all other simple slots like 'raceClass' or 'hair'.
 *
 * @param generatedSchema The schema object parsed from the AI's YAML output.
 * @returns A fully formed DataPackSchema ready for the form.
 */
export function formatDataPackSchemaFromAI(generatedSchema: DataPackSchema): DataPackSchema {
  const profileSchema = generatedSchema.characterProfileSchema || {};
  
  const equipmentSlots: (keyof CharacterProfileSchema)[] = ['head', 'face', 'neck', 'shoulders', 'torso', 'arms', 'hands', 'waist', 'legs', 'feet', 'back'];

  equipmentSlots.forEach(slotKey => {
    const slot = slotKey as keyof CharacterProfileSchema;
    const existingSlotData = profileSchema[slot] || {};
    
    // Ensure the slot exists as an object and has all possible sub-categories initialized if they don't exist.
    const formattedSlot: EquipmentSlotOptions = {
        clothing: (existingSlotData as EquipmentSlotOptions).clothing || [],
        armor: (existingSlotData as EquipmentSlotOptions).armor || [],
        accessory: (existingSlotData as EquipmentSlotOptions).accessory || [],
        weapon: (existingSlotData as EquipmentSlotOptions).weapon || [],
    };
    
    // Assign it back to the profileSchema we are building.
    // This preserves existing simple slots and only formats the complex equipment ones.
    profileSchema[slot] = formattedSlot;
  });

  return {
    ...generatedSchema,
    characterProfileSchema: profileSchema,
  };
}
