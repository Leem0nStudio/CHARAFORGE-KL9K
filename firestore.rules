
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Note: This requires setting a custom claim on the user's auth token.
    // This is not implemented in the app yet, but the rule is ready.
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // USERS COLLECTION
    // Users can read/write their own data. No one else can.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
      
      // Validation rules for user documents
      // - Ensure the data types are correct
      // - Ensure the user ID in the document matches the user's auth UID
      match /users/{userId} {
        allow write: if request.resource.data.uid == userId &&
                        request.resource.data.email is string &&
                        request.resource.data.displayName is string &&
                        request.resource.data.createdAt is timestamp;
      }
    }

    // CHARACTERS COLLECTION
    // - Anyone can read public characters.
    // - Owners can read their private characters.
    // - Owners can create, update, and delete their own characters.
    match /characters/{characterId} {
      allow read: if resource.data.status == 'public' || isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);

      // --- Data Validation ---
      // On Create:
      // - userId must match the creator's UID.
      // - Name must be a non-empty string.
      // - Status must be 'private' initially.
      // - createdAt must be a server timestamp.
      // - biography, description, imageUrl must be strings.
      allow create: if request.resource.data.name is string &&
                       request.resource.data.name != '' &&
                       request.resource.data.description is string &&
                       request.resource.data.biography is string &&
                       request.resource.data.imageUrl is string &&
                       request.resource.data.status == 'private' &&
                       request.resource.data.createdAt == request.time;
                       
      // On Update:
      // - Cannot change the original owner (userId) or creation date.
      // - Name must remain a non-empty string.
      // - Status can only be 'public' or 'private'.
      allow update: if request.resource.data.userId == resource.data.userId &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.name is string &&
                       request.resource.data.name != '' &&
                       (request.resource.data.status == 'private' || request.resource.data.status == 'public');
    }
  }
}
