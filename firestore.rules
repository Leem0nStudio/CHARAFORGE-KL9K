rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || resource.data.preferences.privacy.profileVisibility == 'public';
      allow create, update: if isOwner(userId);
    }

    match /characters/{characterId} {
      // Un usuario puede LEER un personaje si es el propietario O si el personaje es público.
      // Esta es la regla clave que soluciona el problema del listener.
      allow read: if (request.auth.uid != null && request.auth.uid == resource.data.meta.userId) || resource.data.meta.status == 'public';

      // Un usuario puede CREAR un personaje si los datos que está enviando lo marcan como propietario.
      allow create: if isOwner(request.resource.data.meta.userId);

      // Un usuario puede ACTUALIZAR o ELIMINAR un personaje si es el propietario de los datos existentes.
      allow update, delete: if isOwner(resource.data.meta.userId);
    }
    
    // El resto de las colecciones son de solo lectura para los clientes,
    // ya que se gestionan a través del backend seguro.
    match /datapacks/{packId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /storyCasts/{castId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create, update, delete: if isOwner(request.resource.data.userId);
    }
    
    match /settings/{settingId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /ai_models/{modelId} {
       allow read: if true;
       // Solo permite a los usuarios crear/actualizar SUS PROPIOS modelos.
       allow create: if request.resource.data.userId != null && isOwner(request.resource.data.userId);
       allow update, delete: if resource.data.userId != null && isOwner(resource.data.userId);
    }
  }
}
