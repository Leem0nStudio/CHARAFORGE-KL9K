
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Prevents unauthorized fields from being written to documents
    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }

    // Users Collection
    // Users can only read and write their own data.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Ensure preferences object has the correct structure if it exists
      allow write: if request.resource.data.preferences.keys().hasAll(['theme', 'notifications', 'privacy'])
                      && request.resource.data.preferences.theme is string
                      && request.resource.data.preferences.notifications.keys().hasAll(['email'])
                      && request.resource.data.preferences.privacy.keys().hasAll(['profileVisibility']);
    }

    // Characters Collection
    match /characters/{characterId} {
      // Anyone can read public characters, but only the owner can read private ones.
      allow read: if resource.data.status == 'public' || isOwner(resource.data.userId);

      // Only authenticated users can create characters.
      // We validate that the incoming data is from the owner.
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.userId)
                    && hasOnlyAllowedFields(['userId', 'userName', 'name', 'description', 'biography', 'imageUrl', 'status', 'createdAt'])
                    && request.resource.data.status in ['private', 'public'];
      
      // Only the owner can update or delete their character.
      allow update, delete: if isOwner(resource.data.userId);

      // When updating, prevent changing the owner or creation date.
      allow update: if hasOnlyAllowedFields(['name', 'biography', 'status'])
                    && request.resource.data.userId == resource.data.userId
                    && request.resource.data.createdAt == resource.data.createdAt;
    }
  }
}
