
-- 1. Tabla para perfiles de usuario
-- Esta tabla se conectará con la tabla de autenticación de Supabase.
CREATE TABLE IF NOT EXISTS public.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT,
    display_name TEXT,
    photo_url TEXT,
    role TEXT DEFAULT 'user',
    -- Añadimos columnas JSONB para datos flexibles
    stats JSONB,
    preferences JSONB,
    profile JSONB
);

-- 2. Tabla para los personajes
-- Esta es la tabla principal de la aplicación.
CREATE TABLE IF NOT EXISTS public.characters (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    name TEXT NOT NULL,
    archetype TEXT,
    biography TEXT,
    image_url TEXT,

    -- Columnas JSONB para datos anidados y complejos
    core_details JSONB,
    visual_details JSONB,
    lineage_details JSONB,
    generation_details JSONB,
    meta_details JSONB,
    settings_details JSONB,
    rpg_details JSONB
);

-- 3. Tabla para los DataPacks
CREATE TABLE IF NOT EXISTS public.datapacks (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    author TEXT NOT NULL,
    description TEXT,
    cover_image_url TEXT,
    type TEXT NOT NULL,
    price NUMERIC,
    tags TEXT[],
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    schema_details JSONB,
    is_nsfw BOOLEAN DEFAULT FALSE,
    is_imported BOOLEAN DEFAULT FALSE,
    user_id UUID REFERENCES public.users(id) ON DELETE SET NULL -- El creador del DataPack
);

-- 4. Tabla para los Modelos de IA
CREATE TABLE IF NOT EXISTS public.ai_models (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    type TEXT NOT NULL, -- 'model' o 'lora'
    engine TEXT NOT NULL,
    hf_id TEXT,
    civitai_model_id TEXT,
    modelslab_model_id TEXT,
    version_id TEXT,
    base_model TEXT,
    cover_media_url TEXT,
    cover_media_type TEXT,
    trigger_words TEXT[],
    versions_data JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    sync_status TEXT,
    sync_error TEXT,
    gcs_uri TEXT,
    vertex_ai_alias TEXT,
    api_url TEXT,
    comfy_workflow JSONB,
    mix_recipe JSONB
);

-- 5. Tabla para los "Likes"
CREATE TABLE IF NOT EXISTS public.likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    character_id UUID NOT NULL REFERENCES public.characters(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (user_id, character_id)
);

-- 6. Tabla para los "Follows"
CREATE TABLE IF NOT EXISTS public.follows (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    follower_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    following_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (follower_id, following_id)
);

-- 7. Tabla para los "Comentarios"
CREATE TABLE IF NOT EXISTS public.comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_type TEXT NOT NULL, -- 'character', 'datapack', 'article'
    entity_id TEXT NOT NULL,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    user_name TEXT,
    user_photo_url TEXT,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- 8. Tabla para "Story Casts"
CREATE TABLE IF NOT EXISTS public.story_casts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    character_ids UUID[],
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- 9. Tabla para los "Artículos"
CREATE TABLE IF NOT EXISTS public.articles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    slug TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    author_name TEXT,
    content TEXT,
    excerpt TEXT,
    status TEXT DEFAULT 'draft',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    user_id UUID REFERENCES public.users(id) ON DELETE SET NULL
);


-- Índices para mejorar el rendimiento de las consultas
CREATE INDEX IF NOT EXISTS idx_characters_user_id ON public.characters(user_id);
CREATE INDEX IF NOT EXISTS idx_characters_status ON public.characters((meta_details->>'status'));
CREATE INDEX IF NOT EXISTS idx_characters_tags ON public.characters USING GIN ((core_details->'tags'));
CREATE INDEX IF NOT EXISTS idx_likes_character_id ON public.likes(character_id);
CREATE INDEX IF NOT EXISTS idx_comments_entity ON public.comments(entity_type, entity_id);

-- Políticas de Seguridad (Row Level Security - RLS)

-- Habilitar RLS en todas las tablas sensibles
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.characters ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.datapacks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.follows ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.story_casts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.articles ENABLE ROW LEVEL SECURITY;

-- Políticas para la tabla 'users'
CREATE POLICY "Los usuarios pueden ver su propio perfil." ON public.users FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Los usuarios pueden actualizar su propio perfil." ON public.users FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Los perfiles públicos son visibles para todos." ON public.users FOR SELECT USING (((preferences -> 'privacy' ->> 'profileVisibility') = 'public'));

-- Políticas para la tabla 'characters'
CREATE POLICY "Los usuarios pueden ver sus propios personajes." ON public.characters FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Los personajes públicos son visibles para todos." ON public.characters FOR SELECT USING ((meta_details->>'status') = 'public');
CREATE POLICY "Los usuarios pueden crear personajes." ON public.characters FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Los usuarios pueden actualizar sus propios personajes." ON public.characters FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Los usuarios pueden eliminar sus propios personajes." ON public.characters FOR DELETE USING (auth.uid() = user_id);

-- Políticas para 'likes'
CREATE POLICY "Los usuarios pueden ver todos los likes." ON public.likes FOR SELECT USING (true);
CREATE POLICY "Los usuarios pueden dar/quitar like." ON public.likes FOR ALL USING (auth.uid() = user_id);

-- Políticas para 'comments'
CREATE POLICY "Los usuarios pueden ver todos los comentarios." ON public.comments FOR SELECT USING (true);
CREATE POLICY "Los usuarios pueden crear comentarios." ON public.comments FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Los usuarios pueden actualizar sus propios comentarios." ON public.comments FOR UPDATE USING (auth.uid() = user_id);

-- Políticas para 'story_casts'
CREATE POLICY "Los usuarios solo pueden ver y gestionar sus propios casts." ON public.story_casts FOR ALL USING (auth.uid() = user_id);

-- Políticas para 'articles'
CREATE POLICY "Los artículos publicados son visibles para todos." ON public.articles FOR SELECT USING (status = 'published');
CREATE POLICY "Los autores pueden ver sus propios artículos (borradores o publicados)." ON public.articles FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Los usuarios autenticados pueden crear artículos." ON public.articles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Los autores pueden actualizar sus propios artículos." ON public.articles FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Los autores pueden eliminar sus propios artículos." ON public.articles FOR DELETE USING (auth.uid() = user_id);

-- Políticas para 'datapacks' y 'ai_models' (simplificadas: públicos para lectura, restringidos para escritura)
CREATE POLICY "Todos pueden ver los DataPacks." ON public.datapacks FOR SELECT USING (true);
CREATE POLICY "Todos pueden ver los AI Models." ON public.ai_models FOR SELECT USING (true);

-- Solo los administradores o el sistema deben poder escribir en datapacks y ai_models (manejado a nivel de API/Server Action)
-- Nota: Las políticas de escritura más granulares para admin se manejarían mejor con roles de Supabase o en la lógica de la aplicación.
